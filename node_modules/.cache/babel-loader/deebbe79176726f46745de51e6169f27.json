{"ast":null,"code":"var _jsxFileName = \"/Users/anasidrissou/Developer/csci_39548/Final-Project-Full-Stack-CRUD-Application-FrontEnd/src/components/containers/NewStudentContainer.js\";\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from \"./Header\";\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport NewStudentView from \"../views/NewStudentView\";\nimport { addStudentThunk, editStudentThunk } from \"../../store/thunks\";\nimport * as yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        campusId: this.state.campusId\n      }; // Add new student in back-end database\n\n      let newStudent = await this.props.addStudent(student); // Update state, and trigger redirect to show the new student\n\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        imageUrl: \"\",\n        campusId: null,\n        redirect: true,\n        redirectId: newStudent.id\n      });\n    };\n\n    this.state = {\n      firstname: yup.string().required(),\n      lastname: yup.string().required(),\n      email: yup.string().email(),\n      imageUrl: yup.string(),\n      campusId: yup.number().required().positive().integer(),\n      redirect: false,\n      redirectId: null\n    };\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 14\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student)),\n    editStudent: student => dispatch(editStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store\n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","editStudentThunk","yup","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","student","firstname","state","lastname","email","imageUrl","campusId","newStudent","addStudent","redirect","redirectId","id","string","required","number","positive","integer","componentWillUnmount","render","mapDispatch","dispatch","editStudent"],"sources":["/Users/anasidrissou/Developer/csci_39548/Final-Project-Full-Stack-CRUD-Application-FrontEnd/src/components/containers/NewStudentContainer.js"],"sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from \"./Header\";\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport NewStudentView from \"../views/NewStudentView\";\nimport { addStudentThunk, editStudentThunk } from \"../../store/thunks\";\nimport * as yup from 'yup';\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstname: yup.string().required(),\n      lastname: yup.string().required(),\n      email:yup.string().email(),\n      imageUrl: yup.string(),\n      campusId: yup.number().required().positive().integer(),\n      redirect: false,\n      redirectId: null,\n    };\n  }\n\n  // Capture input data when it is entered\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // Take action after user click the submit button\n  handleSubmit = async (event) => {\n    event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n    let student = {\n      firstname: this.state.firstname,\n      lastname: this.state.lastname,\n      email: this.state.email,\n      imageUrl: this.state.imageUrl,\n      campusId: this.state.campusId,\n    };\n\n    // Add new student in back-end database\n    let newStudent = await this.props.addStudent(student);\n\n    // Update state, and trigger redirect to show the new student\n    this.setState({\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      imageUrl: \"\",\n      campusId: null,\n      redirect: true,\n      redirectId: newStudent.id,\n    });\n  };\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({ redirect: false, redirectId: null });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return <Redirect to={`/student/${this.state.redirectId}`} />;\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewStudentView\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n        />\n      </div>\n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    addStudent: (student) => dispatch(addStudentThunk(student)),\n    editStudent: (student) => dispatch(editStudentThunk(student)),\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store\n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}